Description: Add support for building with the system google test
 A major portion of hotspot tests require google test.
 In order to get tier1 tests passing the package should build
 with the system google test.
Author: Vladimir Petko <vladimir.petko@canonical.com>
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/openjdk-20/+bug/2012316
Last-Update: 2023-07-20
--- a/make/autoconf/lib-tests.m4
+++ b/make/autoconf/lib-tests.m4
@@ -43,6 +43,8 @@ AC_DEFUN_ONCE([LIB_TESTS_SETUP_GTEST],
     AC_MSG_CHECKING([for gtest])
     if test "x${with_gtest}" = xno; then
       AC_MSG_RESULT([no, disabled])
+    elif test "x${with_gtest}" = xsystem; then
+      GTEST_FRAMEWORK_SRC=/usr/src/googletest
     elif test "x${with_gtest}" = xyes; then
       AC_MSG_RESULT([no, error])
       AC_MSG_ERROR([--with-gtest must have a value])
--- a/test/hotspot/gtest/gtestMain.cpp
+++ b/test/hotspot/gtest/gtestMain.cpp
@@ -230,7 +230,9 @@ static void runUnitTestsInner(int argc,
   bool is_vmassert_test = false;
   bool is_othervm_test = false;
   // death tests facility is used for both regular death tests, other vm and vmassert tests
-  if (::testing::internal::GTEST_FLAG(internal_run_death_test).length() > 0) {
+using namespace ::testing;
+using namespace ::testing::internal;
+  if (GTEST_FLAG(internal_run_death_test).length() > 0) {
     // when we execute death test, filter value equals to test name
     const char* test_name = ::testing::GTEST_FLAG(filter).c_str();
     const char* const othervm_suffix = "_other_vm"; // TEST_OTHER_VM
